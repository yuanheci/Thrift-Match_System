// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include "save_client/Save.h"
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/ThreadFactory.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/transport/TSocket.h>
#include <thrift/TToString.h>


#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <queue>
#include <vector>
#include <unistd.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::match_service;
using namespace ::save_service;
using namespace std;

struct Task{
    User user;
    string type;
};

//消息队列
struct MessageQueue{
    queue<Task> q;
    mutex m;
    condition_variable cv;
}message_queue;

//匹配池
class Pool{
    public:
        void save_result(int a, int b){
            printf("Match Result: %d %d\n", a, b);

            //作为save_client
            std::shared_ptr<TTransport> socket(new TSocket("123.57.47.211", 9090));
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol);

            try {
                transport->open();

                int res = client.save_data("acs_5844", "cdc8e046", a, b);

                if(!res) puts("success");
                else puts("failed");

                transport->close();
            } catch (TException& tx) {
                cout << "ERROR: " << tx.what() << endl;
            }
        }

        bool check_match(uint32_t i, uint32_t j){
            auto a = users[i], b = users[j];
            //a能够匹配b，并且b也能够匹配a才行
            int dt = abs(a.score - b.score);
            int a_max_dif = wt[i] * 50;
            int b_max_dif = wt[j] * 50;

            return dt <= a_max_dif && dt <= b_max_dif;
        }


        //匹配规则：第一组分数查 <= 50的两个人
        void match(){
            for(uint32_t i = 0; i < wt.size(); i++){
                wt[i]++;   //等待秒数+1
            }

            while(users.size() > 1){
                //这里不能用排序了，因为users和wt中的对应关系会乱掉，所以用两重循环匹配
                bool flag = true;
                for(uint32_t i = 0; i < users.size(); i++){
                    for(uint32_t j = i + 1; j < users.size(); j++){
                        if(check_match(i, j)){
                            auto a = users[i], b = users[j];
                            users.erase(users.begin() + j);
                            users.erase(users.begin() + i);
                            wt.erase(wt.begin() + j);
                            wt.erase(wt.begin() + i);
                            save_result(a.id, b.id);
                            flag = false;
                            break;
                        }
                    }
                    if(!flag) break;  //已经完成本次匹配
                }
                if(flag) break;
            }
        }

        void add(User user){
            users.push_back(user);
            wt.push_back(0);
        }

        void remove(User user){
            //根据id来删除
            for(uint32_t i = 0; i < users.size(); i++) //.size()是无符号整型类型，所以这样不会有warnning
                if(users[i].id == user.id){
                    users.erase(users.begin() + i);
                    wt.erase(wt.begin() + i);
                    break;
                }
        }
    private:
        vector<User> users;
        vector<int> wt;  //表示已经等待的时间，单位: s
}pool;


//涉及到消息队列的读写操作的地方都要用锁
class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        int32_t add_User(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_User\n");

            unique_lock<mutex> lck(message_queue.m);   //当变量被注销时（该函数结束），锁会自动解锁，所以不需要显示解锁
            message_queue.q.push({user, "add"});
            message_queue.cv.notify_all();     //唤醒所有被阻塞的线程

            return 0;
        }

        int32_t remove_User(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_User\n");

            unique_lock<mutex> lck(message_queue.m);
            message_queue.q.push({user, "remove"});
            message_queue.cv.notify_all();

            return 0;
        }

};

void consume_task(){
    while(true){
        unique_lock<mutex> lck(message_queue.m);
        if(message_queue.q.empty()){
            //message_queue.cv.wait(lck);    //将锁释放掉，然后卡在这里，等待唤醒
            //每一秒匹配一次，通过睡眠sleep实现
            lck.unlock();
            pool.match();
            sleep(1);
        }
        else{
            auto task = message_queue.q.front();
            message_queue.q.pop();
            lck.unlock();   //解锁   否则在do task的时候不能往消息队列中放入新的任务，会导致效率低下
            //do task
            if(task.type == "add") pool.add(task.user);
            else if(task.type == "remove") pool.remove(task.user);

        }
    }
}

class MatchCloneFactory : virtual public MatchIfFactory {
    public:
        ~MatchCloneFactory() override = default;
        MatchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override
        {
            std::shared_ptr<TSocket> sock = std::dynamic_pointer_cast<TSocket>(connInfo.transport);
            /*cout << "Incoming connection\n";
            cout << "\tSocketInfo: "  << sock->getSocketInfo() << "\n";
            cout << "\tPeerHost: "    << sock->getPeerHost() << "\n";
            cout << "\tPeerAddress: " << sock->getPeerAddress() << "\n";
            cout << "\tPeerPort: "    << sock->getPeerPort() << "\n";*/
            return new MatchHandler;
        }
        void releaseHandler(MatchIf* handler) override {
            delete handler;
        }
};


int main(int argc, char **argv) {
    //开多线程服务器——生产者消费者模型中，将生产者从单线程变为多线程
    //client每请求一次，都会单独开一个线程，更为高效
    TThreadedServer server(
            std::make_shared<MatchProcessorFactory>(std::make_shared<MatchCloneFactory>()),
            std::make_shared<TServerSocket>(9090), //port
            std::make_shared<TBufferedTransportFactory>(),
            std::make_shared<TBinaryProtocolFactory>());


    cout << "Start Match Server" << endl;

    thread matching_thread(consume_task);   //单开一个线程,传入函数指针

    server.serve();
    return 0;
}

